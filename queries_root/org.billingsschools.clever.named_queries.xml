<?xml version="1.0"?>
<queries>
  <query name="org.billingsschools.clever.admins" coreTable="USERS" flattened="true" tags="">
    <summary>Clever Staff</summary>
    <description>Clever Staff data</description>
    <columns>
      <column column="SCHOOLSTAFF.SCHOOLID">SCHOOL_ID</column>
      <column column="USERS.DCID">STAFF_ID</column>
      <column column="USERS.EMAIL_ADDR">STAFF_EMAIL</column>
      <column column="USERS.FIRST_NAME">FIRST_NAME</column>
      <column column="USERS.LAST_NAME">LAST_NAME</column>
      <column column="USERS.LAST_NAME">DEPARTMENT</column>
      <column column="USERS.LAST_NAME">TITLE</column>
      <column column="USERS.EMAIL_ADDR">USERNAME</column>
      <column column="USERS.EMAIL_ADDR">PASSWORD</column>
      <column column="USERS.EMAIL_ADDR">ROLE</column>
    </columns>
    <sql><![CDATA[
      select distinct
        schools.school_number school_id,
        u.dcid staff_id,
        u.email_addr staff_email,
        u.first_name first_name,
        u.last_name last_name,
        '' department,
        case
          when u.email_addr = principals.principalemail then 'Principal'
          when u.email_addr = principals.asstprincipalemail then 'Associate Principal'
          when u.groupvalue = 10 then 'Special Education'
          when u.groupvalue in (4,12) then 'Counselor'
          else g.name
        end title,
        substr(u.email_addr, 0, instr(u.email_addr, '@')-1) username,
        '' password,
        g.name role
      from
        users u
        left join schoolstaff ss
          on ss.users_dcid = u.dcid
        left join s_mt_usr_x mt
          on mt.usersdcid = u.dcid
        left join gen g
          on g.cat = 'groups'
          and g.id = u.groupvalue
        left join (select school_number schoolid, principalemail, asstprincipalemail from schools) principals
          on principals.schoolid = ss.schoolid
        left join schools
          on instr(u.canchangeschool, schools.school_number) > 0
        left join u_def_ext_users
          on u_def_ext_users.usersdcid = u.dcid
      where
        ss.schoolid not in (0, 999999, 6200, 1267, 1258, 1834, 79438)
        and schools.school_number not in (0, 999999, 6200, 1267, 1258, 1834, 79438)
        and u.psaccess = 1
        and ss.status = 1
        and u.groupvalue in (2,3,4,5,10,11,12)
        and u.last_name not in ('ETS', 'Health/Pe', 'Music', 'Team', 'Staff', 'Staff 1', 'Staff 2', 'Staff 3', 'Staff 4', 'Staff 5', 'Staff 6')
        and u.first_name not in ('1', '2', '3', '4', '5', '6', 'staff')
        and (u_def_ext_users.clever_exclude is null or u_def_ext_users.clever_exclude = 0)
      order by
        u.last_name,
        u.first_name
      ]]>    </sql>
  </query>
  <query name="org.billingsschools.clever.enrollments" coreTable="CC" flattened="true" tags="">
    <summary>Clever Enrollments</summary>
    <description>Clever Enrollments data</description>
    <columns>
      <column column="CC.SCHOOLID">SCHOOL_ID</column>
      <column column="CC.SECTIONID">SECTION_ID</column>
      <column column="CC.STUDENTID">STUDENT_ID</column>
    </columns>
    <sql><![CDATA[
      with first_day_or_today as (
        select
          case
            when t.firstday > sysdate then t.firstday
            else sysdate
          end effdate
        from
          terms t
        where
          t.id = (extract(year from sysdate) + case when extract(month from sysdate) >= 7 then 1 else 0 end - 1991) * 100
          and t.schoolid = 0
          and t.isyearrec = 1
      )

      select
          case
            when cc.schoolid = 1258 and students.grade_level <= 5 then 1439
            when cc.schoolid = 1258 and students.grade_level between 6 and 8 then 1632
            when cc.schoolid = 1258 and students.grade_level >= 9 then 1628
            else cc.schoolid
          end school_id
        , cc.sectionid section_id
        , cc.studentid student_id
      from
        cc
        left join students
          on students.id = cc.studentid
      where
        cc.schoolid not in (0, 999999, 6200, 1267, 1834, 79438)
        and cc.dateenrolled <= (select effdate + 5 from first_day_or_today)
        and cc.dateleft > (select effdate - 5 from first_day_or_today)
        and cc.sectionid > 0
        and students.enroll_status in (-1, 0)
        and students.schoolid not in (79438, 6200)
        and students.grade_level >= 0
      ]]>    </sql>
  </query>
  <query name="org.billingsschools.clever.schools" coreTable="SCHOOLS" flattened="true" tags="">
    <summary>Clever Schools</summary>
    <description>Clever Schools data</description>
    <columns>
      <column column="SCHOOLS.SCHOOL_NUMBER">SCHOOL_ID</column>
      <column column="SCHOOLS.NAME">SCHOOL_NAME</column>
      <column column="SCHOOLS.SCHOOL_NUMBER">SCHOOL_NUMBER</column>
      <column column="SCHOOLS.SCHOOL_NUMBER">STATE_ID</column>
      <column column="SCHOOLS.LOW_GRADE">LOW_GRADE</column>
      <column column="SCHOOLS.HIGH_GRADE">HIGH_GRADE</column>
      <column column="SCHOOLS.PRINCIPAL">PRINCIPAL</column>
      <column column="SCHOOLS.PRINCIPALEMAIL">PRINCIPAL_EMAIL</column>
      <column column="SCHOOLS.SCHOOLADDRESS">SCHOOL_ADDRESS</column>
      <column column="SCHOOLS.SCHOOLCITY">SCHOOL_CITY</column>
      <column column="SCHOOLS.SCHOOLSTATE">SCHOOL_STATE</column>
      <column column="SCHOOLS.SCHOOLZIP">SCHOOL_ZIP</column>
      <column column="SCHOOLS.SCHOOLPHONE">SCHOOL_PHONE</column>
    </columns>
    <sql><![CDATA[
      select
        sch.school_number School_id,
        sch.name School_name,
        sch.school_number,
        sch.school_number state_id,
        sch.low_grade,
        sch.high_grade,
        sch.principal Principal,
        sch.principalemail Principal_email,
        sch.schooladdress School_address,
        sch.schoolcity School_city,
        sch.schoolstate school_state,
        sch.schoolzip School_zip,
        sch.schoolphone School_phone
      from
        schools sch
      where
        sch.school_number not in (0, 999999, 6200, 1267, 1258, 1834, 79438)
      ]]>    </sql>
  </query>
  <query name="org.billingsschools.clever.sections" coreTable="SECTIONS" flattened="true" tags="">
    <summary>Clever Sections</summary>
    <description>Clever Sections data</description>
    <columns>
      <column column="SECTIONS.SCHOOLID">SCHOOL_ID</column>
      <column column="SECTIONS.ID">SECTION_ID</column>
      <column column="USERS.DCID">TEACHER_ID</column>
      <column column="USERS.DCID">TEACHER_2_ID</column>
      <column column="USERS.DCID">TEACHER_3_ID</column>
      <column column="USERS.DCID">TEACHER_4_ID</column>
      <column column="COURSES.COURSE_NAME">NAME</column>
      <column column="SECTIONS.SECTION_NUMBER">SECTION_NUMBER</column>
      <column column="SECTIONS.SECTION_NUMBER">GRADE</column>
      <column column="COURSES.COURSE_NAME">COURSE_NAME</column>
      <column column="COURSES.COURSE_NUMBER">COURSE_NUMBER</column>
      <column column="COURSES.COURSE_NUMBER">COURSE_DESCRIPTION</column>
      <column column="SECTIONS.EXPRESSION">PERIOD</column>
      <column column="SECTIONS.EXPRESSION">SUBJECT</column>
      <column column="TERMS.ABBREVIATION">TERM_NAME</column>
      <column column="TERMS.FIRSTDAY">TERM_START</column>
      <column column="TERMS.LASTDAY">TERM_END</column>
    </columns>
    <sql><![CDATA[
      with first_day_or_today as (
        select
          case
            when t.firstday > sysdate then t.firstday
            else sysdate
          end effdate
        from
          terms t
        where
          t.id = (extract(year from sysdate) + case when extract(month from sysdate) >= 7 then 1 else 0 end - 1991) * 100
          and t.schoolid = 0
          and t.isyearrec = 1
      ),
      extra_teachers as (
        select
          sectionteacher.sectionid,
          sectionteacher.allocation,
          schoolstaff.users_dcid,
          rank() over( partition by sectionteacher.sectionid order by sectionteacher.allocation desc, sectionteacher.teacherid) trank
        from
          sectionteacher
          left join schoolstaff
            on schoolstaff.id = sectionteacher.teacherid
        where
          sectionteacher.roleid != 21
          and (select effdate from first_day_or_today) between sectionteacher.start_date and sectionteacher.end_date
      )

      select
          case
            when sec.schoolid = 1258 and (select max(students.grade_level) from cc left join students on students.id = cc.studentid where cc.sectionid = sec.id group by cc.sectionid) <= 5 then 1439
            when sec.schoolid = 1258 and (select max(students.grade_level) from cc left join students on students.id = cc.studentid where cc.sectionid = sec.id group by cc.sectionid) <= 8 then 1632
            when sec.schoolid = 1258 then 1628
            else sec.schoolid
          end school_id
        , sec.id section_id
        , schoolstaff.users_dcid teacher_id
        , extra_teachers_2.users_dcid teacher_2_id
        , extra_teachers_3.users_dcid teacher_3_id
        , extra_teachers_4.users_dcid teacher_4_id
        , sch.abbreviation || ': ' || c.course_name || ' section ' || sec.section_number name
        , sec.section_number
        , '' grade
        , c.course_name
        , c.course_number
        , '' course_description
        , substr(sec.expression, 0, instr(sec.expression, '(')-1) period
        , '' subject
        , t.abbreviation term_name
        , to_char(t.firstday, 'MM/DD/YYYY') term_start
        , to_char(t.lastday, 'MM/DD/YYYY') term_end

      from
        sections sec
        left join courses c
          on c.course_number = sec.course_number
        left join schools sch
          on sch.school_number = sec.schoolid
        left join terms t
          on t.id = sec.termid and t.schoolid = sec.schoolid
        left join schoolstaff
          on schoolstaff.id = sec.teacher
        left join (select * from extra_teachers) extra_teachers_2
          on extra_teachers_2.sectionid = sec.id
          and extra_teachers_2.trank = 1
        left join (select * from extra_teachers) extra_teachers_3
          on extra_teachers_3.sectionid = sec.id
          and extra_teachers_3.trank = 2
        left join (select * from extra_teachers) extra_teachers_4
          on extra_teachers_4.sectionid = sec.id
          and extra_teachers_4.trank = 3

      where
        sec.schoolid not in (0, 999999, 6200, 1267, 1834, 79438)
        and sec.course_number not in ('NC100', 'NC101', 'NC107', 'PREMTWTH')
        and t.firstday <= (select effdate + 5 from first_day_or_today)
        and t.lastday > (select effdate - 5 from first_day_or_today)
        and (select count(1) from cc where sectionid = sec.id) > 0
        and (
          (
                sec.external_expression not like 'OA%'
            and sec.external_expression not like 'OL%'
          )
          or sec.course_number in ('IN100','NC200') -- Interventions
        )
      ]]>    </sql>
  </query>
  <query name="org.billingsschools.clever.students" coreTable="STUDENTS" flattened="true" tags="">
    <summary>Clever Students</summary>
    <description>Clever Students data</description>
    <columns>
      <column column="STUDENTS.ENROLLMENT_SCHOOLID">SCHOOL_ID</column>
      <column column="STUDENTS.ID">STUDENT_ID</column>
      <column column="STUDENTS.STUDENT_NUMBER">STUDENT_NUMBER</column>
      <column column="STUDENTS.STATE_STUDENTNUMBER">STATE_ID</column>
      <column column="STUDENTS.LAST_NAME">LAST_NAME</column>
      <column column="STUDENTS.MIDDLE_NAME">MIDDLE_NAME</column>
      <column column="STUDENTS.FIRST_NAME">FIRST_NAME</column>
      <column column="STUDENTS.GRADE_LEVEL">GRADE</column>
      <column column="STUDENTS.GENDER">GENDER</column>
      <column column="STUDENTS.DOB">DOB</column>
      <column column="STUDENTS.DOB">RACE</column>
      <column column="STUDENTS.DOB">HISPANIC_LATINO</column>
      <column column="STUDENTS.DOB">ELL_STATUS</column>
      <column column="STUDENTS.DOB">FRL_STATUS</column>
      <column column="STUDENTS.DOB">IEP_STATUS</column>
      <column column="STUDENTS.STREET">STUDENT_STREET</column>
      <column column="STUDENTS.CITY">STUDENT_CITY</column>
      <column column="STUDENTS.STATE">STUDENT_STATE</column>
      <column column="STUDENTS.ZIP">STUDENT_ZIP</column>
      <column column="PSM_STUDENTCONTACT.EMAIL">STUDENT_EMAIL</column>
      <column column="STUDENTS.ZIP">CONTACT_RELATIONSHIP</column>
      <column column="STUDENTS.ZIP">CONTACT_TYPE</column>
      <column column="STUDENTS.ZIP">CONTACT_NAME</column>
      <column column="STUDENTS.ZIP">CONTACT_PHONE</column>
      <column column="STUDENTS.ZIP">CONTACT_EMAIL</column>
      <column column="STUDENTS.ZIP">CONTACT_SIS_ID</column>
      <column column="PSM_STUDENTCONTACT.EMAIL">USERNAME</column>
      <column column="STUDENTS.STUDENT_NUMBER">PASSWORD</column>
    </columns>
    <sql><![CDATA[
      with sr as (
        select
          studentid,
          case racecd
            when '01' then 'I'
            when '02' then 'A'
            when '04' then 'B'
            when '05' then 'W'
            when '06' then 'P'
          end race
        from
          studentrace
      ),
      se as (
        select
          ssm.studentsdcid,
          psc.email
        from
          psm_studentcontact psc
          inner join sync_studentmap ssm
            on psc.studentid = ssm.studentid
          inner join psm_studentcontacttype psct
            on psc.studentcontacttypeid = psct.id
            and psct.name = 'Self'
            and psc.email is not null
      ),
      phones as (
        select
            persondcid
          , phonenumber
          , case phonetype
              when 'Mobile' then 'Cell'
              when 'Home' then 'Home'
              when 'Work' then 'Work'
              when 'Daytime' then 'Home'
              else 'Home'
            end phonetype
          , dense_rank() over (partition by persondcid order by ispreferred desc, phonenumberpriorityorder) as phnrank
        from
          pssis_person_phone

        where
          phonenumberext is null
      ),
      contacts as (
        select
            stucon.studentdcid
          , stucon.currcontactrelationship contact_relationship
          , case
              when stucon.iscustodial = 1 then 'family'
              when stucon.liveswithflg = 1 then 'lives-with'
              when stucon.isemergency = 1 then 'emergency'
              else 'other'
            end contact_type
          , stucon.contactfirstname || ' ' || stucon.contactlastname contact_name
          , phones.phonenumber contact_phone
          , phones.phonetype contact_phone_type
          , stucon.contactpersondcid
          , pcas_emailcontact.emailaddress
        from
          pssis_stu_contact_act stucon
          left join phones
            on phones.persondcid = stucon.contactpersondcid
            and phones.phnrank = 1
          left join guardianpersonassoc
            on guardianpersonassoc.personid = stucon.contactpersonid
          left join guardianstudent
            on guardianstudent.guardianid = guardianpersonassoc.guardianid
            and guardianstudent.studentsdcid = stucon.studentdcid
          left join guardian
            on guardian.guardianid = guardianstudent.guardianid
          left join pcas_account
            on pcas_account.pcas_accounttoken = guardian.accountidentifier
          left join pcas_emailcontact
            on pcas_emailcontact.pcas_accountid = pcas_account.pcas_accountid
          left join person
             on person.id = stucon.contactpersonid
        where
          stucon.contactfirstname is not null
          and guardianstudent.guardianstudentid is not null
          and (
               stucon.relationshipstartdate is null
            or stucon.relationshipstartdate <= sysdate
          )
          and (
               stucon.relationshipenddate is null
            or stucon.relationshipenddate >= sysdate
          )
        order by
          stucon.contactpriorityorder
      )

      select
        s.enrollment_schoolid school_id,
        s.id student_id,
        to_char(s.student_number) student_number,
        s.state_studentnumber state_id,
        s.last_name last_name,
        s.middle_name middle_name,
        s.first_name first_name,
        case s.grade_level
          when 0 then 'Kindergarten'
          when -1 then 'Prekindergarten'
          else to_char(s.grade_level)
        end grade,
        s.gender gender,
        to_char(s.dob, 'MM/DD/YYYY') dob,
        case when (select count(1) from sr where studentid = s.id) > 1 then 'M' else (select race from sr where studentid = s.id) end Race,
        case when s.fedethnicity = 1 then 'Y' else 'N' end Hispanic_latino,
        '' ell_status,
        case s.lunchstatus
          when 'F' then 'F'
          when 'R' then 'R'
          else 'N'
        end frl_status,
        case when stateprogext.speceducflag = 1 then 'Y' else 'N' end iep_status,
        s.street student_street,
        s.city student_city,
        s.state student_state,
        s.zip student_zip,
        se.email student_email,
        contacts.contact_relationship,
        contacts.contact_type,
        contacts.contact_name contact_name,
        contacts.contact_phone contact_phone,
        contacts.emailaddress contact_email,
        contacts.contactpersondcid contact_sis_id,
        substr(se.email, 0, instr(se.email, '@')-1) username,
        lpad(s.student_number, 8, '0') password
      from
        students s
        left join s_mt_stu_programs_x stateprogext
          on stateprogext.studentsdcid = s.dcid
        left join (select * from se) se
          on se.studentsdcid = s.dcid
        left join (select * from contacts) contacts
          on contacts.studentdcid = s.dcid
          and contacts.contact_name != ' '

      where
        s.schoolid not in (0, 999999, 6200, 2100, 1267, 1258, 1834, 79438)
        and s.enrollment_schoolid not in (0, 999999, 6200, 2100, 1267, 1258, 1834, 79438)
        and s.enroll_status in (0, -1)
      ]]>    </sql>
  </query>
  <query name="org.billingsschools.clever.teachers" coreTable="USERS" flattened="true" tags="">
    <summary>Clever Teachers</summary>
    <description>Clever Teachers data</description>
    <columns>
      <column column="SCHOOLSTAFF.SCHOOLID">SCHOOL_ID</column>
      <column column="USERS.DCID">TEACHER_ID</column>
      <column column="USERS.TEACHERNUMBER">TEACHER_NUMBER</column>
      <column column="S_MT_USR_X.SEID">STATE_TEACHER_ID</column>
      <column column="USERS.EMAIL_ADDR">TEACHER_EMAIL</column>
      <column column="USERS.FIRST_NAME">FIRST_NAME</column>
      <column column="USERS.FIRST_NAME">MIDDLE_NAME</column>
      <column column="USERS.LAST_NAME">LAST_NAME</column>
      <column column="USERS.LAST_NAME">TITLE</column>
      <column column="USERS.EMAIL_ADDR">USERNAME</column>
      <column column="USERS.EMAIL_ADDR">PASSWORD</column>
    </columns>
    <sql><![CDATA[
      with first_day_or_today as (
        select
          case
            when terms.firstday > sysdate then terms.firstday
            else sysdate
          end effdate

        from
          terms

        where
          terms.id = (extract(year from sysdate) + case when extract(month from sysdate) >= 7 then 1 else 0 end - 1991) * 100
          and terms.schoolid = 0
          and terms.isyearrec = 1

      )
      , included_teachers as (
        select distinct
            sectionteacher.teacherid
          , case
            when sections.schoolid = 1258 and (select max(students.grade_level) from cc left join students on students.id = cc.studentid where cc.sectionid = sections.id group by cc.sectionid) <= 5 then 1439
            when sections.schoolid = 1258 and (select max(students.grade_level) from cc left join students on students.id = cc.studentid where cc.sectionid = sections.id group by cc.sectionid) <= 8 then 1632
            when sections.schoolid = 1258 then 1628
            else sections.schoolid
          end schoolid
        from
          sections
          left join courses
            on courses.course_number = sections.course_number
          left join schools
            on schools.school_number = sections.schoolid
          left join terms
            on terms.id = sections.termid and terms.schoolid = sections.schoolid
          left join sectionteacher
            on sectionteacher.sectionid = sections.id

        where
              sections.schoolid not in (0, 999999, 6200, 1267, 1834, 79438)
          and sections.course_number not in ('NC100', 'NC101', 'NC107')
          -- and (select effdate from first_day_or_today) between terms.firstday and terms.lastday
          and terms.firstday <= (select effdate + 5 from first_day_or_today)
          and terms.lastday > (select effdate - 5 from first_day_or_today)
          and sections.no_of_students > 0
          and sectionteacher.end_date + 1 >= (select effdate from first_day_or_today)
          and (
            (
                  sections.external_expression not like 'OA%'
              and sections.external_expression not like 'OL%'
            )
            or sections.course_number in ('IN100','NC200') -- Interventions
          )

      )

      , all_teachers as (
        select distinct
            included_teachers.schoolid
          , users.dcid teacher_id
          , users.teachernumber teacher_number
          , s_mt_usr_x.seid state_teacher_id
          , users.email_addr teacher_email
          , users.first_name first_name
          , '' middle_name
          , users.last_name last_name
          , '' title
          , substr(users.email_addr, 0, instr(users.email_addr, '@')-1) username
          , '' password
          , rank() over (partition by users.dcid order by included_teachers.schoolid) rnk

        from
          (select * from included_teachers) included_teachers
          left join schoolstaff
            on schoolstaff.id = included_teachers.teacherid
          left join users
            on users.dcid = schoolstaff.users_dcid
          left join s_mt_usr_x
            on s_mt_usr_x.usersdcid = users.dcid
        where
          users.email_addr is not null
      )

      select
          schoolid
        , teacher_id
        , teacher_number
        , state_teacher_id
        , teacher_email
        , first_name
        , middle_name
        , last_name
        , title
        , username
        , password
      from
        all_teachers
      where
        rnk = 1
      ]]>    </sql>
  </query>
</queries>
